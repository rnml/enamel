; -*- tuareg-mode -*-
open Unbound.Run_time

module Self : sig
  module Kind : sig
    type t =
    | Arr of t * t
    | Star
  end

  module Type : sig
    module Name : Name.S
    module Decl : sig
      type t = Name.t * Kind.t Embed.t
    end
    type t =
    | App of t * t
    | Arr of t * t
    | Exists of (Decl.t, t) Bind.t
    | Forall of (Decl.t, t) Bind.t
    | Fun of (Decl.t, t) Bind.t
    | Record of t Label.Map.t
    | Var of Name.t
  end

  module Term : sig
    module Name : Name.S
    type t =
    | App of t * t
    | Dot of t * Label.t
    | Fun of (Name.t * t, t) Bind.t
    | Let of (Name.t * t Embed.t, t) Bind.t
    | Pack of (Type.Name.t * t Embed.t, t * t) Bind.t
    | Record of t Label.Map.t
    | Ty_app of t * t
    | Ty_fun of (Type.Decl.t, t) Bind.t
    | Unpack of (Type.Name.t * Name.t * t Embed.t, t) Bind.t
    | Var of Name.t
  end

end = struct

  module Kind = struct
    type t =
    | Arr of t * t
    | Star
  end

  module Type = struct
    module Name = Name.Make (struct let doc = "Type" end)
    module Decl = struct
      type t = Type.Name.t * Kind.t
    end
    type t =
    | App of t * t
    | Arr of t * t
    | Exists of (Decl.t, t) Bind.t
    | Forall of (Decl.t, t) Bind.t
    | Fun of (Decl.t, t) Bind.t
    | Record of t Label.Map.t
    | Var of Name.t
  end

  module Term = struct
    module Name = Name.Make (struct let doc = "Term" end)
    type t =
    | App of t * t
    | Dot of t * Label.t
    | Fun of (Name.t * t, t) Bind.t
    | Let of (Name.t * t Embed.t, t) Bind.t
    | Pack of (Type.Name.t * t Embed.t, t * t) Bind.t
    | Record of t Label.Map.t
    | Ty_app of t * t
    | Ty_fun of (Type.Decl.t, t) Bind.t
    | Unpack of (Type.Name.t * Name.t * t Embed.t, t) Bind.t
    | Var of Name.t
  end

end
